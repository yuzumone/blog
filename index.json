[{"body":" Photo by Jainath Ponnala on Unsplash Raspberry Pi Imager ssh とか昔は mkdir とかやった記憶なんですが，今は Imager の設定で ssh や鍵認証まで設定できるようになっていました． Static IP 現在は NetworkManager で設定するのがナウいようです． 初期は設定ファイルがないので名前を設定することでまずはファイルを生成します． yuzumone@raspberrypi:~ $ nmcli connection show NAME UUID TYPE DEVICE Wired Connection 1 9f707e45-298e-39b3-80ef-5bbd96c03f46 ethernet eth0 yuzumone@raspberrypi:~ $ nmcli connection modify 9f707e45-298e-39b3-80ef-5bbd96c03f46 connection.id wired_eth0 /etc/NetworkManager/system-connections 配下に 名前.nmconnection でファイルが生成されます． あとは [ipv4] のところに設定します． yuzumone@raspberrypi:~ $ sudo cat /etc/NetworkManager/system-connections/wired_eth0.nmconnection [connection] id=wired_eth0 uuid=9f707e45-298e-39b3-80ef-5bbd96c03f46 type=ethernet autoconnect-priority=-999 interface-name=eth0 timestamp=1741091271 [ethernet] [ipv4] method=manual addresses=192.168.0.100/24 gateway=192.168.0.1 dns=8.8.8.8;8.8.4.4; [ipv6] addr-gen-mode=default method=auto [proxy] 設定したあとは sudo systemctl restart NetworkManager をして適応します． Storage Longhorn を利用するので /var/lib/longhorn に mount することにします． yuzumone@raspberrypi:~ $ sudo mkfs -t ext4 /dev/sda yuzumone@raspberrypi:~ $ sudo mkdir /var/lib/longhorn yuzumone@raspberrypi:~ $ sudo chmod 777 /var/lib/longhorn yuzumone@raspberrypi:~ $ sudo mount -t ext4 /dev/sda /var/lib/longhorn blkid で UUID を確認して /etc/fstab に追記しておきます． yuzumone@raspberrypi:~ $ blkid /dev/sda: UUID=\u0026#34;919fb770-af9c-487f-a758-6190b524497c\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; yuzumone@raspberrypi:~ $ cat /etc/fstab proc /proc proc defaults 0 0 PARTUUID=b5d3bfc3-01 /boot/firmware vfat defaults 0 2 PARTUUID=b5d3bfc3-02 / ext4 defaults,noatime 0 1 # a swapfile is not a swap partition, no line here # use dphys-swapfile swap[on|off] for that UUID=\u0026#34;919fb770-af9c-487f-a758-6190b524497c\u0026#34; /var/lib/longhorn ext4 defaults 0 0 swap off swap の利用は非推奨なので off します． cat /proc/swaps で確認ができます． yuzumone@raspberrypi:~ $ sudo swapoff --all yuzumone@raspberrypi:~ $ sudo systemctl stop dphys-swapfile yuzumone@raspberrypi:~ $ sudo systemctl disable dphys-swapfile yuzumone@raspberrypi:~ $ sudo systemctl status dphys-swapfile yuzumone@raspberrypi:~ $ cat /proc/swaps Filename Type Size Used Priority Enable cgroups cgroup_memory=1 cgroup_enable=memory を /boot/firmware/cmdline.txt に追記． yuzumone@raspberrypi:~ $ cat /boot/firmware/cmdline.txt console=serial0,115200 console=tty1 root=PARTUUID=b5d3bfc3-02 rootfstype=ext4 fsck.repair=yes rootwait cgroup_memory=1 cgroup_enable=memory Install k3s クラスタは組まないのでワンライナーのやつで適当にインストールします． クラスタを組む場合は ansible role を利用するのが良さそうです． yuzumone@raspberrypi:~ $ curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 yuzumone@raspberrypi:~ $ kubectl get nodes NAME STATUS ROLES AGE VERSION raspberrypi Ready control-plane,master 17s v1.31.6+k3s1 Install Longhorn 実際に立てるサービスは cloudflare-tunnel-ingress-controller を利用しようと思うので，内々で見れれば良いものは NodePort で適当にアクセスすることにします． sudo apt -y install open-iscsi helm repo add longhorn https://charts.longhorn.io helm repo update helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace -f values.yaml $ kubectl -n longhorn-system get po1 NAME READY STATUS RESTARTS AGE engine-image-ei-c2d50bcc-mnnll 1/1 Running 0 10s longhorn-driver-deployer-7fc7ffcb7f-mqkdg 1/1 Running 0 20s longhorn-manager-l5ggl 2/2 Running 0 20s longhorn-ui-5fcc4bcfc7-dpgcw 1/1 Running 0 20s longhorn-ui-5fcc4bcfc7-ll6wm 1/1 Running 0 20s ","tags":["Kubernetes"],"title":"Installing k3s on rasberry pi 5","url":"https://blog.yuzumone.net/posts/installing-k3s-on-rasberry-pi-5/"},{"body":" Photo by Joshua Hoehne on Unsplash macOS でのデーモン系の管理は launchd というものを利用するみたいですね． 早速 yaskkserv2 を launchd で管理してみました． 以下に記載の通りですが，ユーザ管理ものは ~/Library/LaunchAgents に配置するようなのでそこに置きます． Script management with launched in Terminal on Mac OS 起動時に立ち上がってほしいので RunAtLoad で起動するようにしました． \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;net.yuzumone.yaskkserv\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;/usr/bin/yaskkserv2\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;--no-daemonize\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;--listen-address=127.0.0.1\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;--google-japanese-input=notfound\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;/usr/share/skk/dictionary.yaskkserv2\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; あとは有効化します． $ launchctl load yaskkserv.plist $ launchctl list | rg yuzumone 58020 0 net.yuzumone.yaskkserv systemd.timer のように定期実行もできそうなので，crond よりもこっちを利用したほうが良さそうです． ","tags":["MacOS"],"title":"Try launchd on macOS","url":"https://blog.yuzumone.net/posts/try-launchd-on-macos/"},{"body":" Photo by svklimkin on Unsplash grub から systemd-boot にしたいなぁと思っていて，どうせなら綺麗にするかということで Environment Surface Pro Type Cover Keyboard (US) インターネット接続 WiFi でやっていく ip link set wlan0 up wpa_supplicant -B -i wlan0 -c \u0026lt;(wpa_passphrase SSID password) dhcpcd パーティションの作成 gdisk と思ったら最近はワンライナーでいけるらしい sgdisk -z /dev/sda sgdisk -n 1:0:+512M -t 1:ef00 -c 1:\u0026#34;EFI System\u0026#34; /dev/sda sgdisk -n 2:0: -t 2:8300 -c 2:\u0026#34;Linux filesystem\u0026#34; /dev/sda フォーマット mkfs.fat -F32 /dev/sda1 mkfs.ext4 /dev/sda2 マウント mount /dev/sda2 /mnt mkdir -p /mnt/boot mount /dev/sda1 /mnt/boot ミラー変更 あとあと reflector で良い感じにするとして適当な日本のやつを上に書いておく vim /etc/pacman.d/mirrorlist Server = http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/$repo/os/$arch 必須パッケージのインストール どうせいれるやつはこの段階でいれちゃう pacstrap -K /mnt base base-devel linux linux-firmware linux-firmware-marvell \\ intel-ucode efibootmgr dosfstools netctl vim \\ iw wpa_supplicant networkmanager fstab genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab chroot arch-chroot /mnt タイムゾーン ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime hwclock --systohc ローカリゼーション vim /etc/locale.gen # en_US.UTF-8 UTF-8 をアンコメント locale-gen echo \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf ホストネーム みんなどんな hostname にしているのか気になる echo \u0026#34;hostname\u0026#34; \u0026gt; /etc/hostname Initramfs カーネルパッケージをインストールしたときに mkinitcpio が実行されているため、普通は新しい initramfs の作成は必要ありません，とのことだが一応やっておく mkinitcpio -P Root パスワード passwd ブートローダー Secure boot はどっかのタイミングでやりたい bootctl install 設定は /boot/loader/loader.conf default arch.conf timeout 3 console-mode keep editor no ローダの追加は /boot/loader/entries/arch.conf とします title Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options root=/dev/sda2 rw systemd-boot の定期更新を有効にしておく systemctl enable systemd-boot-update shutdown USB メモリを抜くのを忘れない exit shutdown -h now 改めてネットワーク接続 systemctl start NetworkManager systemctl enable NetworkManager nmctl d wifi connect SSID password password ユーザ作成 useradd -m -g wheel -d /home/yuzumone -m yuzumone passwd yuzumone visudo # いつものやつをアンコメント Pacman 周り pacman sudo vim /etc/pacman.conf # ParallelDownloads = 5 と Color をアンコメント reflector sudo pacman -S reflector sudo reflector --country Japan,Australia sudo systemctl enable reflector.timer paccache sudo pacman -S pacman-contrib sudo systemctl enable paccache.timer SSD 毎週 TRIM するようにする sudo systemctl enable fstrim.timer yay git clone https://aur.archlinux.org/yay.git cd yay makepkg -si GUI は sway + lightdm で設定 ","tags":["Linux"],"title":"Arch Linux Install Battle","url":"https://blog.yuzumone.net/posts/arch-linux-install-battle/"},{"body":" Photo by Marc Rentschler on Unsplash PowerShell で curl -w “%{redirect_url}” 相当がしたくなったのでメモ． Param( [String]$Uri ) $request = Invoke-WebRequest -Method Head -Uri $Uri $redirectedUri = $request.BaseResponse.ResponseUri.AbsoluteUri echo $redirectedUri ","tags":["Powershell"],"title":"Get RedirectUri on PowerShell","url":"https://blog.yuzumone.net/posts/get-redirecturi-on-powershell/"},{"body":" Photo by Andrew Neel on Unsplash 雑にいうと Python で Flutter web みたいなことができる． Build multi-platform apps in Python powered by Flutter とりあえずサンプルコードだけ載せておく． import flet from flet import IconButton, Page, Row, TextField, icons def main(page: Page): page.title = \u0026#34;Flet counter example\u0026#34; page.vertical_alignment = \u0026#34;center\u0026#34; txt_number = TextField(value=\u0026#34;0\u0026#34;, text_align=\u0026#34;right\u0026#34;, width=100) def minus_click(e): txt_number.value = int(txt_number.value) - 1 page.update() def plus_click(e): txt_number.value = int(txt_number.value) + 1 page.update() page.add( Row( [ IconButton(icons.REMOVE, on_click=minus_click), txt_number, IconButton(icons.ADD, on_click=plus_click), ], alignment=\u0026#34;center\u0026#34;, ) ) flet.app(target=main) Flutter の Widget 的なやつを Page class に add していくと良い感じに Frontend ができるという感じです． やはり Dart は採用しにくいというところもあると思うので，Python で雑というか簡単に Frontend ができるのは良いです． k8s で動かすので下記のような Dockerfile を作ってええ感じに動かしています． FROM python WORKDIR /app COPY requirements.txt ./ RUN pip install --no-cache-dir -r requirements.txt COPY . . EXPOSE 8550 CMD [\u0026#34;python\u0026#34;, \u0026#34;./main.py\u0026#34;] 細かいことを書いておくと Flutter web のように Canvaskit or HTML どちらかを利用するか選択することができます． デフォルトは Canvaskit です． 残念ポイントとしては Flutter の SelectionArea は利用できません． Text class に Selectable option はありますが，DataTable を利用した時とかちょっとしんどいです． ErrorControl の部分では利用していそうなのでそのうち使えるようになることを祈っています． 個人的には普通に Flutter した方が良いと思うけど，Python でお手軽にというケースはままあるかと思うので頭の片隅に入れておいても良いと思いました． ","tags":["Python"],"title":"Try flet","url":"https://blog.yuzumone.net/posts/try-flet/"},{"body":"飛行機 カンタス航空を利用しました． 行きは羽田 -\u0026gt; メルボルン，帰りはメルボルン -\u0026gt; シドニー -\u0026gt; 羽田という感じでした． 帰りメルボルン空港はカンタス航空専用ターミナルからの出発のため，PP で利用できるラウンジがなかったのが残念． シドニー国際線ターミナルは PP で利用できるラウンジがありますが追加料金が $20 必要なタイプ，そのほかには $36 分の配給が得られるレストランが利用できます． 今回はトランジットの時間が短く利用はできませんでした． メルボルン -\u0026gt; シドニーの国内線から国際線へのトランジット方法をメモっておくと，到着は T3，国際線ターミナルは T1 です． ターミナル間移動が必要なので無料のバスを利用します．Gate15 からバスが出ているのでそこを目指します． T1 に着くとすぐに ePassport Smart gate が出てくるのでそこでイミグレして終わりです．1 時間はかからないと思います． ちなみにパスポートにスタンプが欲しい場合は Smart gate を利用せずに列に並ぶ必要があるようです． 空港から市内 Sky Bus という便利バスがあるのでそれを利用しました． だいたい 10 分間隔で出ているので便利です． 発券機が往復の方が安いぜ！とか言ってきますが，チケットの有効期限は当たり前ですが 1 日なので普通に片道チケットを買わないと損します． ホテル ヒルトンダイヤモンド会員なのでヒルトン系列に泊まるかそれとも LC のホテル優待で泊まるか悩んだんですが， DoubleTree by Hilton Hotel Melbourne — Flinders Street に宿泊しました． 理由としては朝からカフェ巡りをする予定なので朝食が不要だったのと，ホテルの位置が DoubleTree の方が良かったのでそちらにしました． メルボルンには Hilton Melbourne Little Queen Street と DoubleTree がありますが，DoubleTree の方が メルボルン CBD 内を 1 周するトラム 35，また Queen Victoria Market へ行くための縦のトラムの乗り場がどちらも近いため，ラウンジアクセスやより良い朝食が不要なら DoubleTree の方がおすすめです． DoubleTree by Hilton Hotel Melbourne には朝 10 時に到着しましたがその時点でお部屋の準備ができていたため，かなりのアーリーチェックインのご対応をしていただきました． また部屋のアップグレードは KING GUEST ROOM から KING FLINDERS STREET STATION VIEW への約 $100 相当のアップグレードをしてもらいました． Melbourne Hotels - DoubleTree by Hilton Melbourne - Flinders Street Hotel ちなみに LC のホテル優待についてコンシェルジュに問い合わせてみたところ下記の通りの回答がもらえました．ホテル上級会員でない場合はこちらもおすすめです． \u0026lt;W Melbourne\u0026gt; 優待内容： おひとり様 AU$36 分の朝食クレジット アーリーチェックイン・レイトチェックアウト・お部屋のアップグレード WIFI ウェルカムアメニティ AU$100 分のホテルクレジット ※お部屋代充当不可 \u0026lt;INTERCONTINENTAL MELBOURNE\u0026gt; 優待内容： 2 名様分のご朝食 14 時レイトチェックアウト ウェルカムアメニティ \u0026lt;GRAND HYATT MELBOURNE\u0026gt; 優待内容： 2 名様分のご朝食 アーリーチェックイン・お部屋のアップグレード ウェルカムアメニティ US$100 相当分のホテルクレジット ※お部屋代充当不可 観光 自分が行ったのは下記のとおりです． 旧メルボルン監獄 ビクトリア州立図書館 クイーンビクトリア・マーケット このほかだとペンギンの島が有名ですが行きませんでした． ペンギンの島は遠いので基本的にツアーで行くことになるのですが，ペンギン島の他にも動物園が組み込まれており，1 日時間を吸われてしまうのでやめました． コアラのだっこはケアンズですでにやっているし． あとはペンギンは撮影禁止というのもつらいです． 写真を後で見返すまでが旅行だと思っているところがあります． カフェ 全部おすすめ． Seven Seeds はハンバーガーもあったのでご飯も食べたい人はそこかな． Lune Croissanterie は世界 1 美味しいと言われているクロワッサンのお店． Patricia Coffee Brewers\nメルボルン, VICでコーヒーショップ\nja.foursquare.com Market Lane Coffee\nメルボルン, VICでコーヒーショップ\nja.foursquare.com Brother Baba Budan\nメルボルン, VICでコーヒーショップ\nja.foursquare.com MAKER Coffee\nメルボルン, VICでコーヒーショップ\nja.foursquare.com Seven Seeds\nCarlton, VICでカフェ\nja.foursquare.com Lune Croissanterie\nメルボルン, VICでパン屋\nja.foursquare.com レストラン Nomad はコンシェルジュに教えてもらったところです． オリーブオイルアイスクリームサンドイッチ美味しかったのでおすすめ． Rare Steakhouse は CBD 内に 3 店舗ある様子． 今回は Downtown の方に行きました． オーストラリア行ったらオージービーフを食べなくては． Shujinko はラーメン屋です． 海外のラーメン屋はいかにもインスタント麺という感じで最悪なんですが，ここのラーメン屋は日本のラーメン屋と同じくらいのクオリティでした． なお日本での価格と比べてはいけない（約 2,000 円）． Nomad\nメルボルン, VICでオーストラリア料理店\nja.foursquare.com Rare Steakhouse\nメルボルン, VICでステーキハウス\nja.foursquare.com Betty\u0026amp;#39;s Burgers\nメルボルン, VICでハンバーガーレストラン\nja.foursquare.com Shujinko\nメルボルン, VICでラーメン屋\nja.foursquare.com その他 CBD からちょっと遠いですが，Fitzroy というところが古着屋が多いところになっています． その中でも American Vintage はディズニー関連の古着も多くて良かったです． American Vintage\nFitzroy, VICでヴィンテージとリサイクルショップ\nja.foursquare.com まとめ 清澄白河が好きな人は気に入ると思う． ","tags":["travel"],"title":"Melbourne memo","url":"https://blog.yuzumone.net/posts/melbourne-memo/"},{"body":" 現在の unixtime を返してくれる time() を使ったときの Prometheus Unittest の書き方です． よくあるのは SSL 証明書が切れそうなときアラートを発破したいという時かと思います． このアラートのテストをしたいと思ったとき，time() をどう mock するかみたいなことを考えるかと思います． rules: - alert: SSLCertExpiringSoon expr: probe_ssl_earliest_cert_expiry - time() \u0026lt; 86400 * 3 for: 1m 答えはだいたい下記の issue に書いてあります．eval_time が 0s の時 time() は 0 を，例えば 1m の時は 60 を返すようになっているようです． promtool unittests fail with rate() \u0026amp; time() · Issue #4817 · prometheus/prometheus You can\u0026rsquo;t perform that action at this time. You signed in with another tab or window. You signed out in another tab or… github.com ということでこんな感じに書けると思います． - interval: 15s input_series: - series: probe_ssl_earliest_cert_expiry values: 0+0x100 alert_rule_test: - alertname: SSLCertExpiringSoon eval_time: 0s exp_alerts: [] - alertname: SSLCertExpiringSoon eval_time: 90s exp_alerts: - exp_labels: severity: warning ","tags":["Prometheus"],"title":"Prometheus time unittest","url":"https://blog.yuzumone.net/posts/prometheus-time-unittest/"},{"body":"カリフォルニア の Disneyland Resort に行ってきました．事前準備などのメモです． 飛行機 ZIPAIR を利用しました．LCC なので受託手荷物は追加料金が必要です． 今回は事前座席指定・機内食・受託手荷物のセットになっている Value パッケージを追加しました． 座席については充電用 USB ポート・タブレット用ホルダーがあったり，無料で WiFi が利用できるので不便はありませんでした． これで格安でいけるならありですね． 今回ので LA には気軽に行けることが分かったので，次回以降は荷物を 7kg に抑えて事前座先指定だけ追加料金を払うパターンで行くかもしれません． 過去には食べ物の持ち込みが禁止だったようですが，現在は食べ物の持ち込みを許可されているようです． アメリカ入国 イミグレではコロナワクチン接種証明書の提示は求められませんでした． 提示を要求されたのはホテルの reservation と，purpose を聞かれた際にディズニーに行くといったからかパークの入園チケットの提示を求められました． かなりの行列で約 1 時間くらい時間かかったと思います． アナハイムへの移動手段 昔は LAX からのバスが運行されていたようですが，2022/12 時点は稼働していません． クレジットカードのコンシェルジュにも調べてもらいましたが，やはり Uber などタクシーで移動がほとんどのようでした． コンシェルジュの情報源としてはホテルに確認したとのことでした． 時間帯にもよるので参考程度にしてほしいのですが，自分の場合は約 $50 で移動できました． LA Downtown でバス移動した感じだとスーツケースが無ければメトロ・バス移動もできそうです． Metro C Line → Metro C Green → Metro bus 460 という感じで乗り継ぎになりそうです．2 時間くらいは時間がかかりますが，約 $4 で移動できます．Tap カードは必須です． ZIPAIR のように早朝につく便なら（どうせホテルはチェックインできないので）これで移動するのもありだと思います． LA で公共交通機関を利用する場合は Google Map より下記 Transit アプリが便利です． Transit * The simple and beautiful way to get around. パークチケット パークチケットはミッキーネットで購入しました． 理由としては購入タイミングと値上げが発表されたタイミングがかぶってしまったのですが，ミッキーネットが値上げ前の料金で販売してくれていたからです． 以下当時の引用です． ミッキーネットではカリフォルニア ディズニーランド・リゾートとウォルト・ディズニー・ワールド・リゾートのパークチケットを 10 月 20 日まで値上げ前の料金で販売致します。 ディズニー・ジーニー・プラス 1 日お一人 20 ドル ⇒ 1 日お一人 25 ドル ディズニー公式パークチケット 入園日により異なりますが、パークチケットも値上がりしました。 新チケット価格の大人 1 名の例 2 日間パークチケット 285 ドル パークホッパーチケット 345 ドル 3 日間パークチケット 360 ドル パークホッパーチケット 420 ドル 4 日間パークチケット 395 ドル パークホッパーチケット 455 ドル 5 日間パークチケット 415 ドル パークホッパーチケット 475 ドル 10 月 20 日までに購入で！ ミッキーネット割引チケット価格 大人 1 名の例（2022 年 11 月 1 日から使用した場合） 2 日間パークチケット 252 ドル パークホッパーチケット 311 ドル 3 日間パークチケット 319 ドル パークホッパーチケット 381 ドル 4 日間パークチケット 352 ドル パークホッパーチケット 410 ドル 5 日間パークチケット 371 ドル パークホッパーチケット 430 ドル 公式アプリからもチケットは購入できますが，購入前にミッキーネットを覗いてみるのもいいかもしれません． パークの入園予約 舞浜でも株主優待券などのオープン券では入園予約が必要なように Disneyland Resort では事前に入園予約が必要です． パークチケットを購入しただけでは入園できないことに注意してください． 入園予約には Disney アカウントが必要です． 舞浜の Disney Resort アプリでも利用しているあのアカウントです． ただし，名前など英語表記が求められます． 日本版でも英語表記で利用する，もしくは英語用にアカウントを新規に作成するのいずれかが必要です． なお，同じメールアドレスではアカウントを作成できないのでそこから分別する必要があります． 予約自体は下記から行います． Theme Park Reservation System for Park Entry | Disneyland Resort 入園予約をする際は事前にショースケジュールを確認したほうが良いです． スケジュールは下記から確認することができます． 特に Fantasmic! や Tale of the Lion King は平日だとやっていない場合があります． Daily Events Schedule | Disneyland Resort ホテル Hilton Honors 上級会員なので Hilton Anaheim を予約しました． 注意点としては米国 Hilton の場合日本の Hilton のように朝食無料ではない点です． 代わりに $15 のクレジットが付与されます． Hilton Anaheim 内には Starbacks があり，そこでもクレジットを利用することができます． 自分の場合はそこでコーヒーと軽食を購入してパークに向かう感じで使いました． Gold/Diamond member 用の Fast line も用意されているので，ほぼ並ばずに購入できます． 朝食よりもパークにすぐに入りたいという気持ちが強かったので，Starbacks で使えるクレジット付与の方がありがたかったです． なお，Hilton Anaheim にクラブラウンジはありません．Executive Floor は 14 階です． アプリからのチェックイン時 Room 選択の際の参考にしてください． そのほかのホテル 寝に帰るだけと言ったらそうなので，次回はどこに泊まるか悩む．自分が利用するとしたら下記のどれかかな． FHR/LC ホテル優待 The Westin Anaheim Resort Hilton DoubleTree Suites by Hilton Hotel Anaheim Resort — Convention Center Embassy Suites by Hilton Anaheim South Hampton Inn \u0026amp; Suites Anaheim Garden Grove Hampton Inn \u0026amp; Suites Anaheim Resort Convention Center Hilton Anaheim Hilton Garden Inn Anaheim/Garden Grove Hilton Garden Inn Anaheim Resort Home2 Suites by Hilton Anaheim Resort Homewood Suites by Hilton Anaheim-Main Gate Area Homewood Suites by Hilton Anaheim Resort — Convention Center SunCoast Park Hotel Anaheim, Tapestry Collection by Hilton Marriott Bonvoy Anaheim Marriott Courtyard Anaheim Resort/Convention Center Courtyard Anaheim Theme Park Entrance Element Anaheim Resort Convention Center Fairfield Anaheim Resort Four Points by Sheraton Anaheim JW Marriott, Anaheim Resort Residence Inn at Anaheim Resort/Convention Center Sheraton Park Hotel at the Anaheim Resort SpringHill Suites Anaheim Maingate SpringHill Suites at Anaheim Resort/Convention Center The Viv Hotel, Anaheim, a Tribute Portfolio Hotel The Westin Anaheim Resort Wyndham Days Inn \u0026amp; Suites by Wyndham Anaheim At Disneyland Park Days Inn by Wyndham Anaheim West Howard Johnson by Wyndham Anaheim Hotel \u0026amp; Water Playground La Quinta Inn \u0026amp; Suites by Wyndham Anaheim Ramada by Wyndham Anaheim Convention Center Ramada by Wyndham Anaheim Maingate North Super 8 by Wyndham Anaheim/Disneyland Drive Travelodge Inn \u0026amp; Suites by Wyndham Anaheim on Disneyland Dr Wyndham Anaheim ホテルからパークへの移動手段 Hilton 側でパークへの shuttle は用意していません． 下記の ART を利用してくれとのことでした． アプリでチケットを購入できるので，それで買うのが楽です． ちなみに Hilton Anaheim からパークは約 20 分と歩けるには歩けるけどちょっとしんどいなくらいの距離があります． Anaheim Regional Transportation 値段は変更がありそうですが 2022/12 現在は下記のとおりです．すべて大人料金． 1-Day Pass $6.00 3-Day Pass $15.00 5-Day Pass $25.00 入園時 Park Reservation で Disney account と Ticket の Link を行っているはずです． Disneyland App Bottom navigation bar 1 番右のボタン押下後，Tickets and Passes からチケットのコードを表示することができます． 初回入園時入園ゲートでこのコードを提示すると紙のチケットをもらうことができます． その後はもらった紙のチケットで入園することができます． パークの通信環境 舞浜ではエントランスなどごく一部のみ WiFi が利用できますが，Disneyland Resort の場合はほぼ全域で WiFi を利用できます． ただし Disneyland Park 外周を回っている Disneyland Railroad など WiFi が届かないエリアも存在します． Softbank のアメリカ放題や ahamo など日本のキャリアで海外通信ができるものを利用するか，住信 SBI プラチナデビットカードなどクレジットカードで Global Data Roaming by FLEXIROAM などの通信手段を提供している場合もありますので各自の環境に合わせて別途通信手段は用意したほうが良いです． Ginie+ Ginie+ は舞浜のスタンバイパスと Photo key を合わせたようなものです． 少ない日数で日本にないアトラクションに乗りたいと思う人が大半だと思うので，これは契約したほうが良いです． Ginie+ の Lightning Lane に対応しているアトラクションは下記のとおりです． 入園後から Lightning Lane の取得ができます． Autopia Big Thunder Mountain Railroad Buzz Lightyear Astro Blasters Haunted Mansion holiday Indiana Jones Adventure “It’s a small world” Holiday Matterhorn Bobsleds Millennium Falcon: Smugglers Run Space Mountain Splash Mountain Star Tours — The Adventures Continue Goofy’s Sky School Grizzly River Run Guardians of the Galaxy — Mission: BREAKOUT! Incredicoaster Monsters, Inc. Mike \u0026amp; Sulley to the Rescue! Soarin’ Around the World Toy Story Midway Mania! WEB SLINGERS: A Spider-Man Adventure Photo サービスについてはアプリの QR コードを提示することで，キャラクターグリーティングなどで撮影したデータを DL できるようになります． Individual Lightning Lane 上の Ginie+ とは別に別途料金を支払うことで Lightning Lane を利用できるアトラクションもあります． 舞浜で言うプレミアアクセスです． Individual Lightning Lane 対応アトラクションは下記のとおりです． Star Wars: Rise of the Resistance Radiator Springs Racers Rise of the Resistance については Fanstasmic! 終わりに待ち時間が 10 で乗れたので無課金，Radiator Springs Racers については課金しました． Radiator Springs Racers はシングルライダーが設定されているので，次回はシングルライダーで乗ると思います． また最新アトラクションということなので頻繁に temporarily closed になります． その場合待ち時間が短くなるのでそれを狙うのもありです． Fantasmic! / World of Color Dining Package Fantasmic! と World of Color には Dining Package という指定のレストランで指定のメニューを食べると専用のエリアで鑑賞できるというものがあります． https://disneyland.disney.go.com/dining/disneyland/fantasmic-dinner-packages/ World of Color Dining | Disney California Adventure | Disneyland Resort World of Color Virtual Queue World of Color には Virtual Queue というのものも用意されています． 12:00 PM から登録ができます．登録すると Virtual Queue 専用エリアで鑑賞することができます． キャラクターダイニング 今回は以下のものを利用しました． Storytellers Cafe Goofy’s Kitchen 事前予約はした方が良いです． この 2 つについては急がなくても予約枠に余裕があると思います． 利用前にチェックインが必要ですが，Disneyland App からできます． 利用準備ができると SMS での通知があるみたいですが米国電話番号が必要です． App から行うと Notification が飛んでくるので現地より App からチェックインをおすすめ． Goofy’s Kitchen はチェックイン後グーフィーと写真撮影をしながら準備を待ちます． App からチェックインした場合はその旨の連絡などは特にないので気をつけてください． 帰国 コロナ検疫手続きを入国前にできるファストトラックを Visit Japan Web で利用することができます． 登録していない人はなかなかめんどくさそうに見えたので絶対に登録してください． 税関申請も合わせてできます． Visit Japan Web｜デジタル庁 その他気になりそうなところ 室内でもマスクをしている人は皆無でした Mobile Food Orders はめちゃくちゃ便利なので絶対に使った方が良い ","tags":["travel"],"title":"California Disneyland Resort memo","url":"https://blog.yuzumone.net/posts/california-disneyland-resort-memo/"},{"body":" Photo by Eric Rothermel on Unsplash 最近歯医者に行きはじめました．そこで困るようになったのが予約です． 完全リモートワークなのでどの日時でも問題ないのですが，個人の予定表と仕事の予定表をどちらも確認しつつ決めないといけません． 個人予定表と仕事予定表を一括で見られるようにするために，Microsoft Graph API を利用してかんたんな同期をやってみます． ちなみに API が簡単に使えるカレンダーサービスとして TimeTree がありそちらも試してみたのですが，やはり広告が出てしまうのと API 経由で登録したイベントの反映がちょっと遅いような気がしたのでやめました． 手順 流れは下記のとおりです． Azure でアプリを作成する Token 取得 イベント作成 API 叩く on Power Automate まずは Azure portal でアプリを作成します． https://portal.azure.com/ アプリ作成後設定するのは証明書とシークレットと API のアクセス制御です． 証明書とシークレットはよくある client_secret です． 作成後値とクライアントシークレット ID というのが表示されますが，控えておくのは値の方です． 作成後時間が経つと値は表示されなくなるので気をつけてください． API のアクセス制御はどのエンドポイントが叩けるかの設定です． 雑に設定してしまいましたが，アプリケーションの許可で Calendars.Read と Calendars.ReadWrite があれば問題ないと思います． Token の取得はこんな感じです． curl -d \u0026#34;client_id={client_id}\u0026#34; \\ -d \u0026#34;client_secret={client_secret}\u0026#34; \\ -d \u0026#34;scope=https%3A%2F%2Fgraph.microsoft.com%2F.default\u0026#34; \\ -d \u0026#34;grant_type=client_credentials\u0026#34; \\ -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \\ -X POST https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token 詳細はこちら． Get access without a user - Microsoft Graph Token が取得できたらあとはイベント作成 API を叩くだけです． 今回は仕事用の予定表を作成して，個人のものとは分ける感じにします． curl -X POST -H \u0026#34;Authorization: Bearer {token}\u0026#34; \\ -H \u0026#34;Content-type: application/json\u0026#34; \\ -H \u0026#39;Prefer: outlook.timezone=\u0026#34;TokyoStandard Time\u0026#34;\u0026#39; \\ -d \u0026#39;{\u0026#34;subject\u0026#34;: \u0026#34;Let\\\u0026#39;s go for lunch\u0026#34;, \u0026#34;start\u0026#34;: {\u0026#34;dateTime\u0026#34;: \u0026#34;2022-10-23T12:00:00\u0026#34;, \u0026#34;timeZone\u0026#34;: \u0026#34;Tokyo Standard Time\u0026#34;}, \u0026#34;end\u0026#34;: {\u0026#34;dateTime\u0026#34;: \u0026#34;2022-10-23T13:00:00\u0026#34;, \u0026#34;timeZone\u0026#34;: \u0026#34;Tokyo Standard Time\u0026#34;}}\u0026#39; \u0026#39;https://graph.microsoft.com/v1.0/users/{user_id}/calendars/{calendar_id}/events\u0026#39; Create Event - Microsoft Graph v1.0 タイムゾーンについての情報． 日本は「Tokyo Standard Time」 dateTimeTimeZone resource type - Microsoft Graph v1.0 calendar_id は CalendarGroup を辿ると取得できます． Get calendarGroup - Microsoft Graph v1.0 curl で雑に確認できたらあとは Power Automate で設定するだけです． 変更に追随するのは大変なので，Office イベント作成をトリガーに上記の一連作業が行われるようにします． また情報の持ち出しに問われたらめんどくさいので，トリガーされた Office イベントの情報は時間情報だけ利用するようにしてタイトル「予定あり」とだけ追加するようにしました． これで歯医者さんで予定決めるからといってスマホを 2 台眺める必要がなくなりました． ","tags":["MicrosoftGraphAPI"],"title":"Microsoft Graph API Calendar","url":"https://blog.yuzumone.net/posts/microsoft-graph-api-calendar/"},{"body":" Photo by israel palacio on Unsplash Dart で Unix domain socket やっていきます． Support making HTTP requests through unix sockets 環境 2.17.0–94.0.dev 以上であれば動くはず． $ dart --version Dart SDK version: 2.17.6 (stable) (Tue Jul 12 12:54:37 2022 +0200) on \u0026#34;linux_x64\u0026#34; Get import \u0026#39;dart:convert\u0026#39;; import \u0026#39;dart:io\u0026#39;;void main(List\u0026lt;String\u0026gt; arguments) async { HttpClient client = HttpClient() ..connectionFactory = (Uri uri, String? proxyHost, int? proxyPort) { assert(proxyHost == null); assert(proxyPort == null); var address = InternetAddress(\u0026#34;/var/run/docker.sock\u0026#34;, type: InternetAddressType.unix); return Socket.startConnect(address, 0); } ..findProxy = (Uri uri) =\u0026gt; \u0026#39;DIRECT\u0026#39;;final response = await client.getUrl(Uri.parse(\u0026#39;http://localhost/_ping\u0026#39;)).then((request) { return request.close(); }); print(response.statusCode); final responseText = await response .transform(utf8.decoder) .fold(\u0026#39;\u0026#39;, (String x, String y) =\u0026gt; x + y); print(responseText); client.close(); } 実行結果 $ dart run bin/socket.dart 200 OK curl だとこれ相当です $ curl --unix-socket /var/run/docker.sock http://localhost/_ping OK Post import \u0026#39;dart:convert\u0026#39;; import \u0026#39;dart:io\u0026#39;;void main(List\u0026lt;String\u0026gt; arguments) async { HttpClient client = HttpClient() ..connectionFactory = (Uri uri, String? proxyHost, int? proxyPort) { assert(proxyHost == null); assert(proxyPort == null); var address = InternetAddress(\u0026#34;/var/run/docker.sock\u0026#34;, type: InternetAddressType.unix); return Socket.startConnect(address, 0); } ..findProxy = (Uri uri) =\u0026gt; \u0026#39;DIRECT\u0026#39;;final data = { \u0026#39;Image\u0026#39;: \u0026#39;hello-world\u0026#39;, }; final response = await client .postUrl(Uri.parse(\u0026#39;http://localhost/containers/create\u0026#39;)) .then((request) { request.headers.contentType = ContentType(\u0026#39;application\u0026#39;, \u0026#39;json\u0026#39;); request.write(json.encode(data)); return request.close(); }); print(response.statusCode); final res = await postResponse .transform(utf8.decoder) .fold(\u0026#39;\u0026#39;, (String x, String y) =\u0026gt; x + y); print(res); client.close(); } 実行結果 $ dart run bin/socket.dart 201 {\u0026#34;Id\u0026#34;:\u0026#34;636416b53763d106d54555d4709992000bc7709826daaa1f350295bb12d51d1b\u0026#34;,\u0026#34;Warnings\u0026#34;:[]} curl だと $ curl --unix-socket /var/run/docker.sock http://localhost/containers/create -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;Image\u0026#34;: \u0026#34;hello-world\u0026#34;}\u0026#39; {\u0026#34;Id\u0026#34;:\u0026#34;ceb6473c162fbb5238703e07253ba5985938295b511453ca59e6b33a8cbbd224\u0026#34;,\u0026#34;Warnings\u0026#34;:[]} ","tags":["Dart"],"title":"Unix domain socket on Dart","url":"https://blog.yuzumone.net/posts/unix-domain-socket-on-dart/"},{"body":" Photo by Caspar Camille Rubin on Unsplash テンプレートをさくっと作成． $ dart create -t server-shelf foo $ cd foo $ ngdart create web とりあえず shelf を動かしてみるとこんな感じ． $ dart bin/server.dart Server listening on port 8080 2022-03-27T09:27:03.905499 0:00:00.014259 GET [200] / 2022-03-27T09:27:09.375476 0:00:00.005037 GET [200] /echo/foo--- $ curl http://localhost:8080/ Hello, World! $ curl http://localhost:8080/echo/foo foo 次に Angular Dart の方を build して動かしてみます． $ cd web $ webdev build $ cd build $ python -m http.server 8080 Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ... 127.0.0.1 - - [27/Mar/2022 09:34:48] \u0026#34;GET / HTTP/1.1\u0026#34; 200 - 127.0.0.1 - - [27/Mar/2022 09:34:49] \u0026#34;GET /styles.css HTTP/1.1\u0026#34; 200 - 127.0.0.1 - - [27/Mar/2022 09:34:49] \u0026#34;GET /main.dart.js HTTP/1.1\u0026#34; 200 - 127.0.0.1 - - [27/Mar/2022 09:34:49] \u0026#34;GET /favicon.png HTTP/1.1\u0026#34; 200 - とりあえず下記の 4 ファイルをバイナリに含めるようにして，shelf でいい感じに返せば動きそうですね． index.html favicon.png main.dart.js styles.css 良さげなやつがあるのでこれを利用します． aspen | Dart Package ただし更新がされておらず色々修正する必要がありそうだったので git clone して path で追加します． 修正点は下記で dependencies の upgrade や AssetId.resolve の引数が String から Uri に変更されている部分などです． $ git diff diff --git a/aspen_builder/lib/src/bundle_generator.dart b/aspen_builder/lib/src/bundle_generator.dart index 0bbcf48..ab55884 100644 --- a/aspen_builder/lib/src/bundle_generator.dart +++ b/aspen_builder/lib/src/bundle_generator.dart @@ -101,8 +101,9 @@ class BundleGenerator extends GeneratorForAnnotation\u0026lt;Asset\u0026gt; { assetPathReader = annotation.read(\u0026#39;path\u0026#39;); }- var assetId = - AssetId.resolve(assetPathReader.stringValue, from: buildStep.inputId); + var assetId = AssetId.resolve(Uri.parse(assetPathReader.stringValue), + from: buildStep.inputId); + if (!await buildStep.canRead(assetId)) { error(element, \u0026#39;Asset ${assetId} cannot be found\u0026#39;); return Future.value(); diff --git a/aspen_builder/pubspec.yaml b/aspen_builder/pubspec.yaml index 8c90058..70c1732 100644 --- a/aspen_builder/pubspec.yaml +++ b/aspen_builder/pubspec.yaml @@ -7,11 +7,11 @@ environment: sdk: \u0026#39;\u0026gt;=2.8.0 \u0026lt;3.0.0\u0026#39;dependencies: - analyzer: \u0026#39;\u0026gt;=0.37.0 \u0026lt;0.41.0\u0026#39; + analyzer: ^3.4.1 aspen: ^0.3.0 - build: ^1.2.0 - csslib: ^0.16.1 - source_gen: ^0.9.4+3 + build: ^2.2.1 + csslib: ^0.17.1 + source_gen: ^1.2.1 z85: ^0.1.0 また build_runner する際そのままだと Angular Dart の方も見に行ってしまうので build.yaml で lib/assets.dart だけ runner が動くようにします． targets: $default: builders: aspen_builder|bundle_builder: enabled: true generate_for: include: - lib/assets.dart そして肝心の assets.dart の中身はこんな感じ．BinaryAsset はエンコード（z85）周りですんなり動かなさそうだったので諦めました． import \u0026#39;package:aspen/aspen.dart\u0026#39;; import \u0026#39;package:aspen_assets/aspen_assets.dart\u0026#39;;part \u0026#39;assets.g.dart\u0026#39;;@Asset(\u0026#39;asset:foo/web/build/index.html\u0026#39;) const index = TextAsset(text: _index$content);@Asset(\u0026#39;asset:foo/web/build/main.dart.js\u0026#39;) const mainDart = TextAsset(text: _mainDart$content);@Asset(\u0026#39;asset:foo/web/build/styles.css\u0026#39;) const stylesCss = TextAsset(text: _stylesCss$content);// @Asset(\u0026#39;asset:foo/web/build/favicon.png\u0026#39;) // const favicon = BinaryAsset(encoded: _favicon$content); server.dart の router 周りを下記のように Assets 化したそれぞれを読み取ってそれぞれに合わせた content-type で返すようにします． final _router = Router() ..get(\u0026#39;/\u0026#39;, _rootHandler) ..get(\u0026#39;/main.dart.js\u0026#39;, _jsHander) ..get(\u0026#39;/styles.css\u0026#39;, _cssHander);Response _rootHandler(Request req) { final index = assets.index; final headers = {\u0026#39;content-type\u0026#39;: \u0026#39;text/html\u0026#39;}; return Response.ok(index.text, headers: headers); }Response _jsHander(Request req) { final js = assets.mainDart; final headers = {\u0026#39;content-type\u0026#39;: \u0026#39;text/javascript\u0026#39;}; return Response.ok(js.text, headers: headers); }Response _cssHander(Request req) { final css = assets.stylesCss; final headers = {\u0026#39;content-type\u0026#39;: \u0026#39;text/css\u0026#39;}; return Response.ok(css.text, headers: headers); } 残念ながら no-sound-null-safety じゃないと動きません． $ dart --no-sound-null-safety run bin/server.dart コンパイルも no-sound-null-safety で． $ dart compile exe bin/server.dart --no-sound-null-safety -o server Info: Compiling without sound null safety Generated: /home/yuzumone/foo/server これで Angular Dart の成果物を（とりあえず） single binary で動かせます． $ ./server Server listening on port 8080 2022-03-27T11:37:30.338261 0:00:00.000278 GET [200] / 2022-03-27T11:37:30.484749 0:00:00.000083 GET [200] /styles.css 2022-03-27T11:37:30.487764 0:00:00.006299 GET [200] /main.dart.js 2022-03-27T11:37:30.594303 0:00:00.000041 GET [404] /main.dart.js.map 2022-03-27T11:37:30.730615 0:00:00.000022 GET [404] /favicon.png 更新されていないのがしんどすぎるのでこれをパクって sound-null-safety で動くようにしたい．あとは shelf_static あたりをパクって String の内容を渡しつつ，content-type などなどを自力で指定しなくても動いてくれると完璧． ","tags":["Dart"],"title":"Work Angular Dart as single binary","url":"https://blog.yuzumone.net/posts/work-angular-dart-as-single-binary/"},{"body":" Photo by Abel Y Costa on Unsplash go-lang の tablewriter 的な ASCII テーブルで表示するやつが欲しかったの作りました． tabler | Dart Package example のとおりですが，こんな感じで使えます． void main() { var t = Tabler(); t.add([\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]); t.add([1, 22, 333]); print(t); // +---+----+-----+ // | a | b | c | // | 1 | 22 | 333 | // +---+----+-----+ } Dart は dart2native あるし，null safety だし Flutter が無かったとしても結構好きなんですが，こんな基本的と言えるライブラリが無いとは． それだけ Flutter でしか使われてないんだろうなぁ． ","tags":["Dart"],"title":"Release tabler for displaying ASCII table format in Dart","url":"https://blog.yuzumone.net/posts/release-tabler-for-displaying-ascii-table-format-in-dart/"},{"body":" backend はこちら． I tried Dart backend Flutter Web とか AngularDart などあるんですけどちょっと雑にやりたいという場合です． コードは下記の通り． const index = \u0026#39;\u0026#39;\u0026#39;\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello, world!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;main role=\u0026#34;role\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;mt-5\u0026#34;\u0026gt;{{ title }}\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\u0026#39;\u0026#39;\u0026#39;;void main(List\u0026lt;String\u0026gt; args) async { var handler = const shelf.Pipeline() .addMiddleware(shelf.logRequests()) .addHandler(_echoRequest); var server = await io.serve(handler, _hostname, port); print(\u0026#39;Serving at http://${server.address.host}:${server.port}\u0026#39;); }Future\u0026lt;shelf.Response\u0026gt; _echoRequest(shelf.Request request) async { var template = Template(index); var output = template.renderString({\u0026#39;title\u0026#39;: \u0026#39;hoge\u0026#39;}); var headers = {\u0026#39;content-type\u0026#39;: \u0026#39;text/html\u0026#39;} return shelf.Response.ok(output, headers: headers); } index.html を静的ファイルで用意するのが普通だと思うんですが，dart compile して動かしてみたかったので dart ファイルに収めました． go-bindata などのように executable に静的ファイルを include するような仕組みが Dart にもあるといいですね． 気が向いたら作りたい． html の中身は mustache template を使ってみました． というか Dart におけるテンプレートエンジンでこれだ！みたいなのは今のところないです． まぁこれより複雑な GUI が欲しいならそれこそ Flutter web を使うべきだと思います． ","tags":["Dart"],"title":"I tried Dart frontend using shelf","url":"https://blog.yuzumone.net/posts/i-tried-dart-frontend-using-shelf/"},{"body":" Photo by Jamie Davies on Unsplash いよいよ Dart の null safety が stable となりました． これまで何回か紹介しているライブラリ ipaddr を null safety にしていく過程をメモしておきます． 参考までに pullrq は下記です． Sound null safety ドキュメントどおりに進めていきます． Migrating to null safety Check dependency status まずは使用しているライブラリで null safety に対応してないものがないかを確認します． ここでつまずくと何もできないです． ipaddr ではライブラリをほぼ使っていないので下記の通りでした． $ dart pub outdated --mode=null-safety Showing dependencies that are currently not opted in to null-safety. [✗] indicates versions without null safety support. [✓] indicates versions opting in to null safety.Package Name Current Upgradable Resolvable Latestdev_dependencies: pedantic ✗1.9.2 ✓1.11.0 ✓1.11.0 ✓1.11.0 test ✗1.15.7 ✓1.16.5 ✓1.16.5 ✓1.16.52 upgradable dependencies are locked (in pubspec.lock) to older versions. To update these dependencies, use `dart pub upgrade`. Update dependencies 依存関係に問題が無かったので pub upgrade します． null-safety オプションを付けて実行すると pubspec.yaml をいい感じに書き換えてくれます． $ dart pub upgrade --null-safety $ git diff -U0 diff --git a/pubspec.yaml b/pubspec.yaml index e20a246..24695a1 100644 --- a/pubspec.yaml +++ b/pubspec.yaml @@ -10,2 +10,2 @@ dev_dependencies: - pedantic: ^1.8.0 - test: ^1.6.0 + pedantic: ^1.11.0 + test: ^1.16.5 $ dart pub get Migrate いよいよ migrating です． サポートツールがあるので下記の通り実行します． Web GUI を見ろと言われるので見ます． $ dart migrate あとは ! maker を付けて non-nullable であることを指定するなどを行っていきます． 終わったら APPLY MIGRATION ボタンクリックで適応されます． めっちゃ楽ですね． IPv4Address コンストラクタでは null を許容しないようになるので null チェックが常に false になるなども表示されます． ignore: unnecessary_null_comparison を指定することで引き続き null check を記載することも可能です． Analyze \u0026amp; Test migrating が終わったらコード解析とテストも忘れずにやっておきます． $ dart analyze $ dart test Finish はい，これで終了です． サポートツールが便利なのであっけなく終わりました． package version はメジャーバージョンをあげることを推奨されているので，特に強いこだわりがなければそれで良さそうです． ","tags":["Dart"],"title":"Migrating to null safety on Dart","url":"https://blog.yuzumone.net/posts/migrating-to-null-safety-on-dart/"},{"body":" Photo by Goran Ivos on Unsplash Flutter には盛り上がりがみられる Dart でバックエンドもやってみました． この時気になるのがフレームワークどうするか問題ですね． メジャーどころは下記の 2 つです． Aqueduct 最終 commit 2020/09/01 Angel 最終 commit 2020/05/05 とこんな感じで開発はどちらも止まっており，もはや選択肢に入らない状態です． というわけで shelf と shelf_router で実装するのがよさそうな雰囲気です． shelf shelf_router ひな形が stagehand で作れるのでそちらで． ただし，shelf_router は初期だと含まれていないので pubspec.yaml に追加してください． $ stagehand server-shelf Creating server-shelf application `server_test`: /home/yuzumone/server_test/.gitignore /home/yuzumone/server_test/CHANGELOG.md /home/yuzumone/server_test/README.md /home/yuzumone/server_test/analysis_options.yaml /home/yuzumone/server_test/bin/server.dart /home/yuzumone/server_test/pubspec.yaml 6 files written. --\u0026gt; to provision required packages, run \u0026#39;pub get\u0026#39; --\u0026gt; run your app via `dart bin/server.dart`. 初期 server.dart は下記の通り． import \u0026#39;dart:io\u0026#39;;import \u0026#39;package:args/args.dart\u0026#39;; import \u0026#39;package:shelf/shelf.dart\u0026#39; as shelf; import \u0026#39;package:shelf/shelf_io.dart\u0026#39; as io;// For Google Cloud Run, set _hostname to \u0026#39;0.0.0.0\u0026#39;. const _hostname = \u0026#39;localhost\u0026#39;;void main(List\u0026lt;String\u0026gt; args) async { var parser = ArgParser()..addOption(\u0026#39;port\u0026#39;, abbr: \u0026#39;p\u0026#39;); var result = parser.parse(args);// For Google Cloud Run, we respect the PORT environment variable var portStr = result[\u0026#39;port\u0026#39;] ?? Platform.environment[\u0026#39;PORT\u0026#39;] ?? \u0026#39;8080\u0026#39;; var port = int.tryParse(portStr);if (port == null) { stdout.writeln(\u0026#39;Could not parse port value \u0026#34;$portStr\u0026#34; into a number.\u0026#39;); // 64: command line usage error exitCode = 64; return; }var handler = const shelf.Pipeline() .addMiddleware(shelf.logRequests()) .addHandler(_echoRequest);var server = await io.serve(handler, _hostname, port); print(\u0026#39;Serving at http://${server.address.host}:${server.port}\u0026#39;); }shelf.Response _echoRequest(shelf.Request request) =\u0026gt; shelf.Response.ok(\u0026#39;Request for \u0026#34;${request.url}\u0026#34;\u0026#39;); これを shelf_router を使っていい感じに GET と POST を生やしてみます． 下記の感じで handler のところを書き換えます． shelf_router を使うと対応 method と endpoint が分かりやすくなります． ちなみに shelf_router の README では app.handler を渡す感じで記載されていますが，deprecated になっており，下記のように app 自体を渡すのが正解です． var app = Router(); app.get(\u0026#39;/status\u0026#39;, (shelf.Request request) { return shelf.Response.ok(\u0026#39;ok\u0026#39;); }); app.post(\u0026#39;/post\u0026#39;, (shelf.Request request) async { final content = await request.readAsString(); final data = json.decode(content); return shelf.Response.ok(\u0026#39;Hello, ${data[\u0026#34;text\u0026#34;]}\u0026#39;); }); var server = await io.serve(app, _hostname, port); せっかく生やしたので叩いてみます． $ curl http://localhost:8080/status ok $ curl -X POST -d \u0026#39;{\u0026#34;text\u0026#34;: \u0026#34;world\u0026#34;}\u0026#39; http://localhost:8080/post Hello, world ちなみに shelf_router_generator という package もありこちらは Flask のようにデコレータで method や endpoint を指定できます． こっちも良さそうです． shelf_router_generator | Dart Package あとこれは完全に備考ですが，shelf はもちろん dart2native に対応しています． Aqueduct は対応していなかったので一応． $ dart2native bin/server.dart -o test Generated: /home/yuzumone/server_test/test Backlinks I tried Dart frontend using shelf ","tags":["Dart"],"title":"I tried Dart backend","url":"https://blog.yuzumone.net/posts/i-tried-dart-backend/"},{"body":" Photo by TheRegisti on Unsplash ランチャーアイコンを作ってくれる flutter_launcher_icons はとても便利です． Android の Adaptive Icon を SVG でやりたい場合は不十分です（雑に見てみた感じ png しか指定できないようでした）． ということでこんな感じでやると良さそうというのをメモ． flutter_launcher_icons Adaptive Icon なので普通に ic_launcher_foreground.svg 的なものを用意します． 用意したら AndroidStuio の Image Asset Studio を起動します． 詳細は下記を． Create app icons with Image Asset Studio | Android Developers 使用する svg の指定と Scaling あたりを指定したら脳死で Next を押して Finish します． これで Android 側はアイコンが良い感じに設定されます． これで Android 側は OK ですが iOS 側が残っています． iOS 側は flutter_launcher_icons で設定します． Image Asset Studio ではアイコンのほかにも Play Store 用に大きいサイズの画像を吐き出してくれているので，それを有効活用します． flutter_icons: android: false ios: true image_path: \u0026#34;android/app/src/main/ic_launcher-web.png\u0026#34; あとは flutter_launcher_icons を実施します． flutter pub get flutter pub run flutter_launcher_icons:main iOS 側の画像サイズの知見が全くないのであれですが，シミュレータで見た感じぼやけているような感じは無かったので大丈夫そう． ","tags":["Flutter"],"title":"That’s how I create flutter launcher icon","url":"https://blog.yuzumone.net/posts/thats-how-i-create-flutter-launcher-icon/"},{"body":" Photo by Kelly Sikkema on Unsplash Flutter web で OpenID Connect やってたメモ． 以下を参考にしました． openid_client | Dart Package まずは認証ページを出すところまで． Flutter web は SPA なので Client Secret は渡せるようになっていますが渡しません． var clientId = \u0026#39;foobar\u0026#39;; var uri = Uri.parse(\u0026#39;https://hogehoge.com\u0026#39;); var issuer = await Issuer.discover(uri); var client = Client(issuer, clientId); var authenticator = Authenticator(client, scopes: scopes); authenticator.authorize(); authorize の中身． state を LocalStorage に入れて，認証ページを href に入れているだけですね． void authorize() { _forgetCredentials(); window.localStorage[\u0026#39;openid_client:state\u0026#39;] = flow.state; window.location.href = flow.authenticationUri.toString(); } さあここからサンプルと違うところです． サンプルの場合はそもそも Flutter web ではないので 1 枚の View で構成されています． しかし Flutter の場合は違います． 多くの場合以下のような MainApp を用意して home なり routes で子 View がいてその子 View に認証ボタンのようなものを用意するのが多いのではないでしょうか． class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( ... ); } } この場合，認証が完了して query parameter で渡された値は当たり前ですが子 View に伝搬されません． ということで MyApp の build で openid_client でやっている実装をやってみました． @override Widget build(BuildContext context) { checkExp(); if (window.location.href != null) { var uri = Uri(query: Uri.parse(window.location.href).fragment); var q = uri.queryParameters; if (q.containsKey(\u0026#39;access_token\u0026#39;) || q.containsKey(\u0026#39;code\u0026#39;) || q.containsKey(\u0026#39;id_token\u0026#39;)) { if (window.localStorage[\u0026#39;openid_client:state\u0026#39;] == q[\u0026#39;state\u0026#39;]) { window.localStorage[\u0026#39;openid_client:auth\u0026#39;] = json.encode(q); } } } ... } checkExp() は期限の確認をしています． 中身はこんな． void checkExp() { if ([\u0026#39;\u0026#39;, null].contains(window.localStorage[\u0026#39;openid_client:auth\u0026#39;])) { return; } var auth = json.decode(window.localStorage[\u0026#39;openid_client:auth\u0026#39;]); var token = auth[\u0026#39;id_token\u0026#39;]; var jwt = json.decode(utf8.decode(base64Url.decode(token.split(\u0026#39;.\u0026#39;)[1]))); var exp = jwt[\u0026#39;exp\u0026#39;]; var now = DateTime.now().millisecondsSinceEpoch ~/ 1000; if (exp \u0026lt; now) { window.localStorage[\u0026#39;openid_client:auth\u0026#39;] = \u0026#39;\u0026#39;; } } あとは以下のような条件でログイン後の View を出し分けする感じです． [\u0026#39;\u0026#39;, null].contains(window.localStorage[\u0026#39;ipenid_client:auth\u0026#39;]) 多分 runApp() のところらへんで Authenticator を持って～～ってやればサンプル通りにかけるんだけどこれで動くからいいかなと． あと openid は関係ないんだけど，localStrage 参照しているのもあってテストは platform 指定しないと動かなかったのでメモ． $ flutter test --platform chrome -v ","tags":["Flutter"],"title":"Flutter web oidc authentication","url":"https://blog.yuzumone.net/posts/flutter-web-oidc-authentication/"},{"body":" Photo by Richy Great on Unsplash workflow.yml ほんと単純で keystore を用意して，いわゆる local.properties を作成して build しているだけですね． flavor も考えるとつらいですが自分のケースの場合は — dart-define=\u0026lt;foo=bar\u0026gt; で済むケースがほとんどです． jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-java@v1 with: java-version: \u0026#39;12.x\u0026#39; - uses: subosito/flutter-action@v1 with: channel: \u0026#39;stable\u0026#39; - run: echo \u0026#34;${{secrets.ANDROID_RELEASE_BASE64_KEY}}\u0026#34; | base64 -d \u0026gt; ./keystore.jks - run: echo \u0026#34;keyAlias=keystore\u0026#34; \u0026gt;\u0026gt; android/key.properties - run: echo \u0026#34;keyPassword=${{secrets.ANDROID_RELEASE_KEY_PASSWORD}}\u0026#34; \u0026gt;\u0026gt; android/key.properties - run: echo \u0026#34;storeFile=`pwd`/keystore.jks\u0026#34; \u0026gt;\u0026gt; android/key.properties - run: echo \u0026#34;storePassword=${{secrets.ANDROID_RELEASE_STORE_PASSWORD}}\u0026#34; \u0026gt;\u0026gt; android/key.properties - name: build apk run: flutter build apk --build-number ${GITHUB_RUN_NUMBER} - name: deploygate run: | curl \\ -H \u0026#34;Authorization: token ${{secrets.DEPLOYGATE_API_KEY}}\u0026#34; \\ -F \u0026#34;file=@build/app/outputs/flutter-apk/app-release.apk\u0026#34; \\ \u0026#34;https://deploygate.com/api/users/{username}/apps\u0026#34; android/app/build.gradle 上で作成した key.properties を読むようにします． def keystoreProperties = new Properties() def keystorePropertiesFile = rootProject.file(\u0026#39;key.properties\u0026#39;) if (keystorePropertiesFile.exists()) { keystoreProperties.load(newFileInputStream(keystorePropertiesFile)) }signingConfigs { release { keyAlias keystoreProperties[\u0026#39;keyAlias\u0026#39;] keyPassword keystoreProperties[\u0026#39;keyPassword\u0026#39;] storeFile file(keystoreProperties[\u0026#39;storeFile\u0026#39;]) storePassword keystoreProperties[\u0026#39;storePassword\u0026#39;] } } ","tags":["Flutter"],"title":"Flutter Android Release Build on GitHub Actions","url":"https://blog.yuzumone.net/posts/flutter-android-release-build-on-github-actions/"},{"body":" Photo by Debby Hudson on Unsplash どうしても RSA Private key を使用して署名をしなきゃいけない案件があったのでやりました． 使用したライブラリは下記です． 死ぬほど助かりました． encrypt | Dart Package このライブラリを選択したのは parseKeyFromFile が用意されていたからです． ほかにも似たライブラリはあるんですが，KeyPair をジェネレートまたは JWT から生成しかなさそうでした． 今回は環境変数に base64 エンコードした key をセットして再署名していきます． Future\u0026lt;T\u0026gt; parseKeyFromFile\u0026lt;T extends RSAAsymmetricKey\u0026gt;(String filename) async { final file = File(filename); final key = await file.readAsString(); final parser = RSAKeyParser(); return parser.parse(key) as T; } というわけでコード． import \u0026#39;package:encrypt/encrypt.dart\u0026#39;;var key = bool.hasEnvironment(\u0026#39;PRIVATE_KEY\u0026#39;) ? String.Environment(\u0026#39;PRIVATE_KEY\u0026#39;) : \u0026#39;\u0026#39;;def sign() { var parser = RSAKeyParser(); var privateKey = parser.parse(utf8.decode(base64.decode(key))); var signer = Signer(RSASigner(RSASignDigest.SHA256, privateKey: privateKey)); var content = \u0026#39;This is content.\u0026#39; return signer.sign(content).base64; } Flutter web で問題なく動いたので Android ・ iOS も動きそうな気がします． ","tags":["Flutter"],"title":"Encryption with private key in RSA using Dart","url":"https://blog.yuzumone.net/posts/encryption-with-private-key-in-rsa-using-dart/"},{"body":" Photo by Victoire Joncheray on Unsplash GitHub Container Registry が GA したみたいなので使ってみます． ついでなので Flutter web で． 普通に docker push するのは普通過ぎるので actions でやります． サンプルレポジトリは下記です． yuzumone/flutter-web-docker-sample Dockerfile サンプルなので flutter create でやってます． 実際の場合は git clone するか COPY かどっちかですかね． FROM cirrusci/flutter:beta AS buildRUN flutter config --enable-webRUN flutter create sample WORKDIR /home/cirrus/sample RUN flutter build webFROM nginx COPY --from=build /home/cirrus/sample/build/web /usr/share/nginx/html workflow.yml run してるだけだし shell と変わらないけど． tag どうするか悩んで github.sha 使ったんですけどベストプラクティスがあれば知りたい． jobs: build: name: Build image runs-on: ubuntu-18.04 steps: - uses: actions/checkout@master - name: Login run: docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} - name: Build run: docker build -t docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${{ github.sha }} --file Dockerfile . - name: Push run: docker push docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${{ github.sha }} あと IMAGE_NAME も今回は env で指定したけど今回みたいに 1 個しか作らないなら下の感じでやるのが良さそう． echo ${{ github.repository }} | awk -F \u0026#39;/\u0026#39; \u0026#39;{print $2}\u0026#39; ","tags":["Flutter"],"title":"Flutter web docker on GitHub Container Registry","url":"https://blog.yuzumone.net/posts/flutter-web-docker-on-github-container-registry/"},{"body":" Photo by Brandable Box on Unsplash Python パッケージの RPM 化といえば bdist_rpm がありますが，この場合依存パッケージも PRM 化する必要があります． ということで venv でいい感じにパッケージ化するときの spec ファイルの内容をメモ． ということで下記です． %define venv_name package_name %define venv_install_dir /opt/%{venv_name} %define venv_dir %{buildroot}%{venv_install_dir} %define venv_bin %{venv_dir}/bin %define __prelink_undo_cmd %{nil} %undefine __arch_install_post %global __os_install_post %(echo \u0026#39;%{__os_install_post}\u0026#39; | sed -e \u0026#39;s!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g\u0026#39;) Name: package_name Version: %{package_version} Release: 1%{?dist} Summary: package_summary URL: https://github.com/hoge/huga Source0: ./ Requires: python3%description long_package_desccription%prep rm -rf %{buildroot}/*%install install -d %{buildroot}%{venv_install_dir} %{buildroot}/usr/sbin python3 -m venv %{venv_dir} %{venv_bin}/python %{venv_bin}/pip install --upgrade pip %{venv_bin}/python %{venv_bin}/pip install venvctrl cd %{_topdir} %{venv_bin}/python setup.py install ln -sf %{venv_install_dir}/bin/package_name %{buildroot}/usr/sbin/package_name find %{buildroot} -name \u0026#34;RECORD\u0026#34; -exec rm -rf {} \\; %{venv_bin}/venvctrl-relocate --source=%{venv_dir} --destination=%{venv_install_dir} find %{venv_dir}/lib -type f -name \u0026#34;*.so\u0026#34; | xargs -r strip%files %{venv_install_dir} /usr/sbin/package_name%clean rm -rf %{buildroot} 軽く解説を書くと /opt 配下に pip install をやったあと /usr/sbin 配下にシンボリックリンクを張っています． CUI ツールなどでよくあるパターンかと思います． Cent6 と Cent7 で動くことは確認しているので大丈夫のはず． あと当たり前なんですけど venv が activate 状態で rpmbuild すると venv の Python でパッケージが作成されるので注意してください． ","tags":["Python"],"title":"Build RPM Package of Python","url":"https://blog.yuzumone.net/posts/build-rpm-package-of-python/"},{"body":" Photo by Domenico Loia on Unsplash Flutter web でレスポンシブ対応したときのメモ． responsive_builder を使うとめっちゃ簡単． responsive_builder | Flutter Package 以下のようにデバイスに応じて Widget を返すようにするだけ． ResponsiveBuilder( builder: (context, sizingInformation) { if (sizingInformation.deviceScreenType == DeviceScreenType.desktop) { return DesktopWidget(); } if (sizingInformation.deviceScreenType == DeviceScreenType.tablet) { return TabletWidget(); } if (sizingInformation.deviceScreenType == DeviceScreenType.mobile) { return MobileWidget(); } return Container(color:Colors.purple); }, ); 今回は横のマージンだけ変えたかったのでマージンだけ渡せるようにした． class MainPage extends StatelessWidget { final double sideMergin; const MainPage({Key key, this.sideMergin = 160.0}) : super(key: key); ... } ","tags":["Flutter"],"title":"Making Flutter web apps responsive","url":"https://blog.yuzumone.net/posts/making-flutter-web-apps-responsive/"},{"body":" Photo by fabio on Unsplash Flutter でモバイルだけでなくデスクトップや Web などマルチプラットフォームに対応している NoSQL データベースライブラリ sembast を使ってみたのでメモ． sembast | Dart Package JSON から DB をつくる DB から JSON への export，import に対応しているんだけどそれなりにしないと import できない． tekartik/sembast.dart import \u0026#39;package:sembase/utils/semast_import_export.dart\u0026#39;;var stores = { \u0026#39;name\u0026#39;: \u0026#39;message\u0026#39; \u0026#39;keys\u0026#39;: keys, \u0026#39;values\u0026#39;: values, }; var data = { \u0026#39;sembase_export\u0026#39;: 1, \u0026#39;version\u0026#39;: 1, stores: [stores], }; var db = await importDatabase(data, databaseFactory, \u0026#39;mydata.db\u0026#39;); クエリ tekartik/sembast.dart var store = stringMapStoreFactory.store(\u0026#39;message\u0026#39;); var finder = Finder(filter: Filter,matches(\u0026#39;message\u0026#39;, query); var records = store.find(_db, finder: finder); records.then((value) =\u0026gt; setState(() =\u0026gt; _records.addAll(value.map((e)=\u0026gt;e.value).toList()))); マルチプラットフォーム対応 DB を作成するときにモバイルと Web とかで databaseFactory が違うんだけど作者がええかんじにする utils を公開しているのでこれを使う． tekartik/app_flutter_utils.dart import \u0026#39;package:tekartik_app_flutter_idb/app_sembast.dart\u0026#39;;var packageName = \u0026#39;net.hugahuga.hogehoge\u0026#39;; var databaseFactory = getDatabaseFactory(packageName: packageName); var db = await importDatabase(data, databaseFactory, \u0026#39;mydata.db\u0026#39;); おわり これまで sqflite 使っていたけど Web に対応してないし，これを機に sembast にしてもいいかも． Realm が Dart 対応を進めてるらしいのでそれの動向も気になる． ","tags":["Dart","Flutter"],"title":"Testing out sembast","url":"https://blog.yuzumone.net/posts/testing-out-sembast/"},{"body":" Photo by Alexandru Acea on Unsplash Dart で ipaddress をいい感じにするライブラリを作りました． yuzumone/ipaddr ipaddr | Dart Package モチベーション 生活していると「あーこのアドレスがこのセグメント内かどうか調べたいわー」となることが多いと思います． これまでは Python でやることが多かったのですが，Dart でやりたい欲がふつふつと湧いてきました． 軽く見た感じ Python の ipaddress 相当のものがなさそうだったので作りました． 使い方 Readme の通りですが． import \u0026#39;package:ipaddr/ipaddr.dart\u0026#39; as ipaddr; main() { var address = ipaddr.IPv4Address(\u0026#39;192.168.10.10\u0026#39;); var network = ipaddr.IPv4Network(\u0026#39;192.168.10.0/24\u0026#39;); if (network.addresses.contains(address)) { print(\u0026#39;${address} is included ${network}\u0026#39;); // 192.168.10.10 is included 192.168.10.0/24 } } ライブラリを公開してみて Maven とかと比べるとめっちゃ楽です． やることは以下のコマンドだけ． pub publish --dry-run pub publish 注意点としては dry-run はパッケージ名の重複は見てくれないというところです． 成功したからいける～と思ったらできなくてひどい目にあいました． 一応 pub.dev で検索してからいけそうだったのでそのライブラリ名にしたんですが，管理されていないのは名前が完全一致していてもトップに表示されないみたいです． ぴえん． ","tags":["Dart"],"title":"I created a Dart library that simplifies working with IP addresses","url":"https://blog.yuzumone.net/posts/i-created-a-dart-library-that-simplifies-working-with-ip-addresses/"},{"body":" Photo by Emile Perron on Unsplash arrays.xml arrays は string-array で設定します． integer-array でやる場合は自分で spinner の xml を書かないといけなくなると思います． \u0026lt;resources\u0026gt; \u0026lt;string-array name=\u0026#34;message_count\u0026#34;\u0026gt; \u0026lt;item\u0026gt;100\u0026lt;/item\u0026gt; \u0026lt;item\u0026gt;200\u0026lt;/item\u0026gt; \u0026lt;item\u0026gt;500\u0026lt;/item\u0026gt; \u0026lt;item\u0026gt;1000\u0026lt;/item\u0026gt; \u0026lt;item\u0026gt;2000\u0026lt;/item\u0026gt; \u0026lt;/string-array\u0026gt; \u0026lt;/resources\u0026gt; 使う側 string-array でやれば android.R.layout.simple_spinner_item と android.R.layout.simple_spinner_dropdown_item が使えるので楽です． 逆に android~ を使わない場合は自分で ArrayAdapter を作成して Spinner#setAdapter() すれば良さそうです． val spinnerAdapter = ArrayAdapter.createFromResource(this, R.array.message_count, android.R.layout.simple_spinner_item) spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item) spinnerCount.adapter = spinnerAdapter spinnerCount.onItemSelectedListener = object : AdapterView.OnItemSelectedListener { override fun onNothingSelected(parent: AdapterView\u0026lt;*\u0026gt;?) {}override fun onItemSelected(parent: AdapterView\u0026lt;*\u0026gt;?, view: View?, position: Int, id: Long) { val count = parent!!.getItemAtPosition(position).toString().toInt() // なんか } } まとめ Spinner でググっても記事の日付が古いものしか出てこなかったのでメモで書いてみました． ","tags":["Android"],"title":"Revisiting Android Spinners","url":"https://blog.yuzumone.net/posts/revisiting-android-spinners/"},{"body":" Photo by Daniel Sturgess on Unsplash イケてない GitHub に上げれないので CI/CD しようと思ったときめんどくさい apply plugin: ‘com.google.gms.google-services’ を app/build.gradle の 1 番下に書く必要がある FCM と com.google.gms.google-services の仲が悪い（らしい） ということで環境変数に APP_ID などを設定して FCM と Analytics を使う方法について書いていきます． FCM root の build.gradle（これは公式のやつと変わらない） buildscript { ext.kotlin_version = \u0026#39;1.2.51\u0026#39; repositories { google() jcenter() } dependencies { classpath \u0026#39;com.android.tools.build:gradle:3.1.3\u0026#39; classpath \u0026#39;com.google.gms:google-services:3.2.0\u0026#39; classpath \u0026#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\u0026#34; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } }allprojects { repositories { google() jcenter() } } app/build.gradle apply plugin: \u0026#39;com.android.application\u0026#39; apply plugin: \u0026#39;kotlin-android\u0026#39;android { compileSdkVersion 27 defaultConfig { applicationId \u0026#34;net.yuzumone.test\u0026#34; minSdkVersion 21 targetSdkVersion 27 versionCode 1 versionName \u0026#34;1.0\u0026#34; buildConfigField(\u0026#34;String\u0026#34;, \u0026#34;APP_ID\u0026#34;, \u0026#34;\\\u0026#34;${System.env.FCM_APP_ID}\\\u0026#34;\u0026#34;) buildConfigField(\u0026#34;String\u0026#34;, \u0026#34;API_KEY\u0026#34;, \u0026#34;\\\u0026#34;${System.env.FCM_API_KEY}\\\u0026#34;\u0026#34;) } buildTypes { release { minifyEnabled true proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; } } } dependencies { implementation fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;]) implementation\u0026#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\u0026#34; implementation \u0026#39;com.android.support:appcompat-v7:27.1.1\u0026#39; implementation \u0026#39;com.google.firebase:firebase-messaging:17.1.0\u0026#39; } Application class TestApplication : Application() { override fun onCreate() { super.onCreate() FirebaseApp.initializeApp(this, FirebaseOptions.Builder() .setApplicationId(BuildConfig.APP_ID) .setApiKey(BuildConfig.API_KEY) .build(), getString(R.string.app_name)) } } ポイント buildConfigField を使用して環境変数から BuildConfig へ APP_ID を読み込む Application クラスで FirebaseApp#initializeApp を呼び，APP_ID と API_KEY を入れる これだけでとりあえず FCM は使えるようになる． 環境変数に値を設定するのを忘れずに． Analytics FCM にものに追加で設定する必要がある． app/build.gradle android { defaultConfig { // 追加 resValue(\u0026#34;string\u0026#34;, \u0026#34;google_app_id\u0026#34;, \u0026#34;\\\u0026#34;${System.env.FCM_APP_ID}\\\u0026#34;\u0026#34;) } } dependencies { // 追加 implementation \u0026#39;com.google.firebase:firebase-analytics:16.0.1\u0026#39; } 上に示している通り，Analytics を使うには string.xml に google_app_id という name で APP_ID を追加で設定する必要がある． string.xml に直で書くと意味がないので，resValue を使用して string.xml に値をセットするようにしてみた． とりあえずこれでエラーが出なくなったので OK っぽい． ","tags":["Android"],"title":"Using Firebase Cloud Messaging and Analytics without google-services.json","url":"https://blog.yuzumone.net/posts/using-firebase-cloud-messaging-and-analytics-without-google-services-json/"},{"body":" Photo by Henri L. on Unsplash \u0026lt;layout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; \u0026gt; \u0026lt;data\u0026gt; \u0026lt;variable name=\u0026#34;viewModel\u0026#34; type=\u0026#34;example.MyViewModel\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;android.support.constraint.ConstraintLayout android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:padding=\u0026#34;16dp\u0026#34; \u0026gt; \u0026lt;android.support.design.widget.TextInputEditText android:id=\u0026#34;@+id/edit_name\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/button_ok\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:onClick=\u0026#34;@{(v) -\u0026gt; viewModel.action(editName.getText().toString())}\u0026#34; app:layout_constraintTop_toBottomOf=\u0026#34;@+id/edit_name\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; /\u0026gt; \u0026lt;/android.support.constraint.ConstraintLayout\u0026gt; \u0026lt;/layout\u0026gt; ポイント Java or Kotlin 側で使うように CamelCase で view の ID を書く ","tags":["Android"],"title":"Getting values from other Views in Android Data Binding","url":"https://blog.yuzumone.net/posts/getting-values-from-other-views-in-android-data-binding/"},{"body":" Photo by Louis Tsai on Unsplash Kotlin の ReadWriteProperty を使って Delegate して Preference をいい感じにするやつを使ってみました． ちなみに ReadWriteProperty は以下のように定義されています． interface ReadWriteProperty\u0026lt;in R, T\u0026gt; ReadWriteProperty - Kotlin Programming Language ReadWriteProperty 例えば int を Preference に入れる ReadWriteProperty class IntPreference( private val preferences: SharedPreferences, private val name: String, private val defaultValue: Int ) : ReadWriteProperty\u0026lt;Any, Int\u0026gt; {@WorkerThread override fun getValue(thisRef: Any, property: KProperty\u0026lt;*\u0026gt;): Int { return preferences.getInt(name, defaultValue) }override fun setValue(thisRef: Any, property: KProperty\u0026lt;*\u0026gt;, value: Int) { preferences.edit().putInt(name, value).apply() } } 使う側 あとは以下のような感じで Delegate class SharedPreferenceStorage(context: Context) { private val prefs = context.applicationContext.getSharedPreferences(PREFS_NAME, MODE_PRIVATE) companion object { private const val PREFS_NAME = \u0026#34;example.prefs\u0026#34; private const val PREF_MESSAGE_COUNT = \u0026#34;pref_message_count\u0026#34; } var messageCount by IntPreference(prefs, PREF_MESSAGE_COUNT, 200) } 何がいいか 例えば Preference に出し入れする値が多いと以下のように set()と get()を何回も書かなければなりません． var hoge: String get() = preference.getString(HOGE, \u0026#34;\u0026#34;) set(value) = preference.edit().putString(HOGE, value).apply() var huga: String get() = preference.getString(HUGA, \u0026#34;\u0026#34;) set(value) = preference.edit().putString(HUGA, value).apply() var foo: String get() = preference.getString(FOO, \u0026#34;\u0026#34;) set(value) = preference.edit().putString(FOO, value).apply() var bar: String get() = preference.getString(BAR, \u0026#34;\u0026#34;) set(value) = preference.edit().putString(BAR, value).apply() 上がこうなる． きれい． var hoge by StringPreference(prefs, HOGE, \u0026#34;hoge\u0026#34;) var huga by StringPreference(prefs, HUGA, \u0026#34;huga\u0026#34;) var foo by StringPreference(prefs, FOO, \u0026#34;foo\u0026#34;) var bar by StringPreference(prefs, BAR, \u0026#34;bar\u0026#34;) まとめ Preference が多くなるだろうと思われるときは積極的に ReadWriteProperty を使っていこう． ","tags":["Android"],"title":"Using Kotlin's ReadWriteProperty for modern Android Preference handling","url":"https://blog.yuzumone.net/posts/using-kotlins-readwriteproprty-for-modern-android-preference-handling/"},{"body":" Photo by Fahim Muntashir on Unsplash 最近 issue がとんできてて，そのときになんじゃこれ～と思ったのでメモ． きた issue は以下． Parsing error · Issue #9 · yuzumone/Recordachi 解決策 APK を作成する際，Signature Versions を V1 と V2 にチェックを入れる． Signature Versions とは Android Studio2.3 から選択するようになった． Android7.0 から新しい署名スキームである V2 が導入され，以前のスキームは V1 となった． これは何となく知ってたんだけど，Android7.0 未満の端末では V2 でしか署名がないとインストールに失敗するのは知らなかった． 参考 \u0026lsquo;App not Installed\u0026rsquo; Error on Android ","tags":["Android"],"title":"When told the APK can't be installed","url":"https://blog.yuzumone.net/posts/when-told-the-apk-cant-be-installed/"},{"body":" Photo by Volodymyr Dobrovolskyy on Unsplash Android の TextView で複数行 Ellipsize してタップすると全文表示するようなライブラリを作ってみました． yuzumone/ExpandableTextView 動作は下の感じです． 作った pic.twitter.com/IcyLLXjG9P\n\u0026mdash; ゆずもね (@Yuzu_037) June 7, 2017 もともとすでに実装はしていて，今も Twltrus の Reply 送信画面では上の動作のような感じにはなっていました． Twltrus の実装では Fragment で boolean を持っていて TextView の ClickListener のところで Ellipsize する・しないを切り替えていました． CustomView にしたほうが TextView の状態を Activity や Fragment で気にしなくてよくなるよなというところです． あとは Android が正式に Kotlin をサポートということで Kotlin でライブラリを作ってみました． ","tags":["Android"],"title":"Created an Android library for multi-line ellipsizing","url":"https://blog.yuzumone.net/posts/created-an-anroid-library-for-multi-line-ellipsizing/"}]